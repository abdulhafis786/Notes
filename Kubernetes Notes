Minikube is a single instance of Kubernetes cluster 

minikube version -- to get the Version of Minikube 

minikube start --wait=false -- to start the minikube 

minikube is a Single instance cluster. To INteract with it we need to have commands executed via kubectl.

kubectl cluster-info -- to get the info about the cluster.

kubectl get nodes -- To get the nodes runnning in the cluster.

The flow of Kubernetes is as Cluster -> Nodes -> Pods -> Containers. A node may be a physical or virtual Machine which could 
contain multiple pods and each pod may contain multiple container depending on the input given.

kubectl create deployment first-deployment --image=katacoda/docker-http-server --- This will create a first deployment on the cluster.

kubectl get pods -- to get the number of pods running.

kubectl expose deployment first-deployment --port=80 --type=NodePort - this is to expose the deployment whihc was done on the cluster.
Node port option is given to assign Dynamic port on the system.

kubectl get svc first-deployment -o go-template='{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{"\n"}}{{end}}{{end}}' -- To get the port number of the Deployment done.

kubectl get svc first-deployment -- This will give the Details of the first-deployment done.Here first deployment is the name .

minikube addons enable dashboard --- To enable the addon for the dashboard. 

kubectl apply -f /opt/kubernetes-dashboard.yaml -- To apply the dashboard. the contenst of the yaml file is below,

apiVersion: v1
kind: Service
metadata:
  labels:
    app: kubernetes-dashboard
  name: kubernetes-dashboard-katacoda
  namespace: kube-system
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 9090
    nodePort: 30000
  selector:
    app: kubernetes-dashboard
  type: NodePort

kubectl get pods -n kube-system  -w -- to show the pods associated with the kube-system which is the dashboard.

If to run multiple cluster, we start with Kubeadm

kubeadm version -o short --- To get the version of kubeadm

kubeadm init --token=102952.1a7dd4cc8d1f4cc5 --kubernetes-version $(kubeadm version -o short) -- to initialize the kubeadm.
In Production the Token option is not needed as kubeadm will generate one for us.

The Container Network Interface (CNI) defines how the different nodes and their workloads should communicate
More information can be obtained at https://kubernetes.io/docs/concepts/cluster-administration/addons/

kubectl apply -f /opt/weave-kube --- here weave-kube is applied as container network interface.

kubeadm token list -- to list the tokens availabe in the master. This is used so that other members could join the master.

kubeadm join --discovery-token-unsafe-skip-ca-verification --token=102952.1a7dd4cc8d1f4cc5 172.17.0.47:6443 ->
This is for the node to join the master using the token generated from the master.

The --discovery-token-unsafe-skip-ca-verification tag is used to bypass the Discovery Token verification. As this token is generated dynamically, we couldn't include it within the steps. 

kubectl run http --image=katakoda/docker-http-server:latest --replicas=1 -- This will run the image http on the kubernetes cluster.
here running the container is nothing but deploying the container.

kubectl get deployments -- to get the number of deployments running on the server. here deployment is nothing but the images running.

kubectl describe deployment http -- gives a detailed information about the deployment of the image on the cluster.

kubectl expose deployment http --external-ip="172.17.0.19" --port=8000 --target-port=80 -- Here we are exposing the deployment
to an external IP and a port to be accessible from the outside network.

kubectl run httpexposed --image=katacoda/docker-http-server:latest --replicas=1 --port=80 --hostport=8001 -- this creates a deployment and 
exposes the port to the external network

kubectl get svc -- to get the list of services listed and exposed. if the above command is used to create and expose a deployment,
it wont show in this command output.

docker ps | grep httpexposed --- this will show that the deployment created and exposed in a single command (line 79)

Running the above command you'll notice the ports are exposed on the Pause, not the http container itself. 
The Pause container is responsible for defining the network for the Pod. 
Other containers in the pod share the same network namespace. 
This improves network performance and allow multiple containers to communicate over the same network interface.

eg:
$ docker ps | grep httpexposed
387fe2365c34        katacoda/docker-http-server   "/app"                   About a minute ago   Up About a minute                          k8s_httpexposed_httpexposed-569df5d86-pf8n4_default_3bab7c5e-b0a1-41fb-8b61-220a25588ed6_0
bb3ae1928210        k8s.gcr.io/pause:3.1          "/pause"                 About a minute ago   Up About a minute   0.0.0.0:8001->80/tcp   k8s_POD_httpexposed-569df5d86-pf8n4_default_3bab7c5e-b0a1-41fb-8b61-220a25588ed6_0

kubectl scale --replicas=3 deployment http -- to scale the replicas created for the deployment. Replicas are nothing but the images


